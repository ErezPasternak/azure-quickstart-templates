{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "dnsLabelPrefix": {
      "type": "string",
      "metadata": {
        "description": "Unique public DNS prefix for the deployment. The fqdn will look something like '<dnsname>.westus.cloudapp.azure.com'. Up to 62 chars, digits or dashes, lowercase, should start with a letter: must conform to '^[a-z][a-z0-9-]{1,61}[a-z0-9]$'."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "West US",
      "allowedValues": [
        "West US",
        "East US",
        "East US 2",
        "Central US",
        "South Central US",
        "North Central US",
        "North Europe",
        "West Europe",
        "East Asia",
        "Southeast Asia",
        "Japan East",
        "Japan West",
        "Southeast Asia"
      ],
      "metadata": {
        "description": "Location to deploy to"
      }
    },
    "emailAddress": {
      "type": "string",
      "metadata": {
        "description": "The email address to send the test message to."
      }
    }
  },
  "variables": {
    "storageAccountName": "[concat(uniquestring(resourceGroup().id), 'RDS', 'Storage')]",
    "domainName": "esb.local",
    "adminUsername": "ericom",
    "adminPassword": "Ericom123$",
    "numberOfRdshInstances": 1,
    "rdshVmSize": "Standard_D2",
    "imagePublisherWindows": "MicrosoftWindowsServer",
    "imagePublisherLinux": "Canonical",
    "imageOfferWindows": "WindowsServer",
    "imageOfferLinux": "UbuntuServer",
    "imageSKUWindows": "2012-R2-Datacenter",
    "imageSKULinux": "14.04.2-LTS", 
    "vnetAddressRange": "10.0.0.0/16",
    "subnetAddressRange": "10.0.0.0/24",
    "dnsServerPrivateIp": "10.0.0.8",
    "subnetName": "Subnet",
    "subnet-id": "[concat(resourceId('Microsoft.Network/virtualNetworks','VNET'),'/subnets/',variables('subnetName'))]",
    "customScriptLocation": "https://raw.githubusercontent.com/ErezPasternak/azure-quickstart-templates/EricomConnect/SecureBrowsing/",
    "publicIpRef": "publicIp",
    "ecGridname": "ecgrid",
    "sqlserver": "localhost",
    "sqldatabase": "ERICOMCONNECTDB",
    "sqluser": "sa",
    "sqlpassword": "P@55w0rd",
    "apiVersion": "2015-06-15"
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIpRef')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsLabelPrefix')]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('StorageAccountName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "Standard_LRS"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "availabilityset",
      "location": "[resourceGroup().location]"
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "vnet",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetAddressRange')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetAddressRange')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/loadBalancers",
      "name": "loadBalancer",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/',variables('publicIpRef'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LBFE",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIpRef'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LBBAP"
          }
        ],
        "inboundNatRules": [
          {
            "name": "https",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer'),'/frontendIPConfigurations/LBFE')]"
              },
              "protocol": "tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false
            }
          },
          {
            "name": "gateway",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer'),'/frontendIPConfigurations/LBFE')]"
              },
              "protocol": "udp",
              "frontendPort": 3391,
              "backendPort": 3391,
              "enableFloatingIP": false
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "dc-nif",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "Microsoft.Network/virtualNetworks/vnet"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('dnsServerPrivateIp')]",
              "subnet": {
                "id": "[variables('subnet-id')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "dc-vm",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts',variables('StorageAccountName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces','dc-nif')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_D2"
        },
        "osProfile": {
          "computerName": "dc",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[variables('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisherWindows')]",
            "offer": "[variables('imageOfferWindows')]",
            "sku": "[variables('imageSkuWindows')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',variables('StorageAccountName'),'.blob.core.windows.net/vhds/dc-vm-os-disk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "name": "dc-vm-data-disk",
              "vhd": {
                "Uri": "[concat('http://',variables('StorageAccountName'),'.blob.core.windows.net/vhds/dc-vm-data-disk.vhd')]"
              },
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": "1000",
              "lun": 0
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces','dc-nif')]"
            }
          ]
        }
      },
      "resources": [
        {
          "type": "Microsoft.Compute/virtualMachines/extensions",
          "name": "dc-vm/createadforest",
          "apiVersion": "[variables('apiVersion')]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', 'dc-vm')]"
          ],
          "properties": {
            "publisher": "Microsoft.Powershell",
            "type": "DSC",
            "typeHandlerVersion": "2.8",
            "settings": {
              "ModulesUrl": "[concat(variables('customScriptLocation'),'CreateADPDC.zip')]",
              "ConfigurationFunction": "CreateADPDC.ps1\\CreateADPDC",
              "Properties": {
                "DomainName": "[variables('domainName')]",
                "AdminCreds": {
                  "UserName": "[variables('adminUsername')]",
                  "Password": "PrivateSettingsRef:AdminPassword"
                },
                "emailAddress": "[parameters('emailAddress')]"
              }
            },
            "protectedSettings": {
              "Items": {
                "AdminPassword": "[variables('adminPassword')]"
              }
            }
          }
        }
      ]
    },
    {
      "apiVersion": "2015-01-01",
      "type": "Microsoft.Resources/deployments",
      "name": "updatevnetdns",
      "dependsOn": [
        "Microsoft.Compute/virtualMachines/dc-vm/extensions/createadforest"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('customScriptLocation'),'vnet-with-dns-server.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "VNET"
          },
          "virtualNetworkAddressRange": {
            "value": "[variables('vnetAddressRange')]"
          },
          "subnetName": {
            "value": "[variables('subnetName')]"
          },
          "subnetRange": {
            "value": "[variables('subnetAddressRange')]"
          },
          "DNSServerAddress": {
            "value": [
              "[variables('dnsServerPrivateIp')]"
            ]
          }
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "gw-nif",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "Microsoft.Network/loadBalancers/loadBalancer",
        "Microsoft.Resources/deployments/updatevnetdns"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnet-id')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer'),'/backendAddressPools/LBBAP')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer'),'/inboundNatRules/https')]"
                },
                {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer'),'/inboundNatRules/gateway')]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "cb-nif",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "Microsoft.Resources/deployments/updatevnetdns"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnet-id')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "lnx-nif",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "Microsoft.Resources/deployments/updatevnetdns"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnet-id')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('rdsh-', copyindex(), '-nif')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "rdsh-nif-loop",
        "count": "[variables('numberOfRdshInstances')]"
      },
      "dependsOn": [
        "Microsoft.Resources/deployments/updatevnetdns"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnet-id')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "gw-vm",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('StorageAccountName'))]",
        "[resourceId('Microsoft.Compute/availabilitySets', 'availabilityset')]",
        "Microsoft.Network/networkInterfaces/gw-nif",
        "Microsoft.Compute/virtualMachines/cb-vm/extensions/EricomConnectServerSetup"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_D2"
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', 'availabilityset')]"
        },
        "osProfile": {
          "computerName": "gateway",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[variables('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisherWindows')]",
            "offer": "[variables('imageOfferWindows')]",
            "sku": "[variables('imageSKUWindows')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',variables('StorageAccountName'),'.blob.core.windows.net/vhds/gw-vm-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces','gw-nif')]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2015-05-01-preview",
          "type": "Microsoft.Compute/virtualMachines/extensions",
          "name": "gw-vm/GatewaySetup",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', 'gw-vm')]"
          ],
          "properties": {
            "publisher": "Microsoft.Powershell",
            "type": "DSC",
            "typeHandlerVersion": "2.8",
            "settings": {
              "ModulesUrl": "[concat(variables('customScriptLocation'),'Configuration.zip')]",
              "ConfigurationFunction": "Configuration.ps1\\GatewaySetup",
              "Properties": {
                "DomainName": "[variables('domainName')]",
                "AdminCreds": {
                  "UserName": "[variables('adminUsername')]",
                  "Password": "PrivateSettingsRef:AdminPassword"
                },
                "gridName": "[variables('ecGridname')]",
                "LUS": "broker.test.local",
                "tenant": "root",
                "externalfqdn": "[reference(variables('publicIpRef')).dnsSettings.fqdn]",
                "emailAddress": "[parameters('emailAddress')]"
              }
            },
            "protectedSettings": {
              "Items": {
                "AdminPassword": "[variables('adminPassword')]"
              }
            }
          }
        }
      ]
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat('rdsh-', copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "rdsh-vm-loop",
        "count": "[variables('numberOfRdshInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('StorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', 'rdsh-', copyindex(), '-nif')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('rdshVmSize')]"
        },
        "osProfile": {
          "computerName": "[concat('rdsh-', copyIndex())]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[variables('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisherWindows')]",
            "offer": "[variables('imageOfferWindows')]",
            "sku": "[variables('imageSKUWindows')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',variables('StorageAccountName'),'.blob.core.windows.net/vhds/rdsh-',copyindex(),'-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat('rdsh-', copyindex(), '-nif'))]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "[variables('apiVersion')]",
          "type": "Microsoft.Compute/virtualMachines/extensions",
          "name": "[concat('rdsh-', copyindex(),'/ApplicationHost')]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat('rdsh-', copyindex()))]",
            "Microsoft.Compute/virtualMachines/cb-vm/extensions/EricomConnectServerSetup"
          ],
          "properties": {
            "publisher": "Microsoft.Powershell",
            "type": "DSC",
            "typeHandlerVersion": "2.8",
            "settings": {
              "ModulesUrl": "[concat(variables('customScriptLocation'),'Configuration.zip')]",
              "ConfigurationFunction": "Configuration.ps1\\ApplicationHost",
              "Properties": {
                "DomainName": "[variables('domainName')]",
                "AdminCreds": {
                  "UserName": "[variables('adminUsername')]",
                  "Password": "PrivateSettingsRef:AdminPassword"
                },
                "gridName": "[variables('ecGridname')]",
                "LUS": "broker.test.local",
                "tenant": "root"
              }
            },
            "protectedSettings": {
              "Items": {
                "AdminPassword": "[variables('adminPassword')]"
              }
            }
          }
        }
      ]
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "cb-vm",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('StorageAccountName'))]",
        "[resourceId('Microsoft.Compute/availabilitySets', 'availabilityset')]",
        "Microsoft.Network/networkInterfaces/cb-nif"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_D3"
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', 'availabilityset')]"
        },
        "osProfile": {
          "computerName": "broker",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[variables('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisherWindows')]",
            "offer": "[variables('imageOfferWindows')]",
            "sku": "[variables('imageSKUWindows')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',variables('StorageAccountName'),'.blob.core.windows.net/vhds/cb-vm-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces','cb-nif')]"
            }
          ]
        }
      },
      "resources": [
        {
          "type": "Microsoft.Compute/virtualMachines/extensions",
          "name": "cb-vm/EricomConnectServerSetup",
          "apiVersion": "[variables('apiVersion')]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', 'cb-vm')]"
          ],
          "properties": {
            "publisher": "Microsoft.Powershell",
            "type": "DSC",
            "typeHandlerVersion": "2.8",
            "settings": {
              "ModulesUrl": "[concat(variables('customScriptLocation'),'Configuration.zip')]",
              "ConfigurationFunction": "Configuration.ps1\\EricomConnectServerSetup",
              "Properties": {
                "domainName": "[variables('domainName')]",
                "adminCreds": {
                  "UserName": "[variables('adminUsername')]",
                  "Password": "PrivateSettingsRef:AdminPassword"
                },
                "externalfqdn": "[reference(variables('publicIpRef')).dnsSettings.fqdn]",
                "gridName": "[variables('ecGridname')]",
                "sqlserver": "[variables('sqlserver')]",
                "sqldatabase": "[variables('sqldatabase')]",
                "sqlCreds": {
                  "UserName": "[variables('sqluser')]",
                  "Password": "PrivateSettingsRef:SqlPassword"
                }
              }
            },
            "protectedSettings": {
              "Items": {
                "AdminPassword": "[variables('adminPassword')]",
                "SqlPassword": "[variables('sqlpassword')]"
              }
            }
          }
        }
      ]
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "lnx-vm",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('StorageAccountName'))]",
        "Microsoft.Network/networkInterfaces/lnx-nif"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('rdshVmSize')]"
        },
        "osProfile": {
          "computerName": "lnx",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[variables('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisherLinux')]",
            "offer": "[variables('imageOfferLinux')]",
            "sku": "[variables('imageSKULinux')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',parameters('StorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',variables('OSDiskName'),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces','lnx-nif')]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://',parameters('StorageAccountName'),'.blob.core.windows.net')]"
          }
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "lnx-vm/enablevmaccess')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "Microsoft.Compute/virtualMachines/lnx-vm"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "VMAccessForLinux",
        "typeHandlerVersion": "1.1",
        "settings": {},
        "protectedSettings": {
          "username": "[parameters('userName')]",
          "password": "[parameters('password')]",
          "reset_ssh": "[parameters('resetSSH')]",
          "ssh_key": "[parameters('sshKey')]",
          "remove_user": "[parameters('userNameToRemove')]"
        }
      }
    }
  ]
}